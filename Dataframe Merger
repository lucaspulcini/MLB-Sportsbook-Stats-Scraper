import os
import pandas as pd
from draftkingsProps import draftkings_props_scraper
from pitcherStats import scrape_pitcher_stats, scrape_xera

# Constants for URLs
DRAFTKINGS_URL = 'https://sportsbook.draftkings.com/leagues/baseball/mlb?category=pitcher-props&subcategory=outs-recorded'
PITCHING_STATS_URL = 'https://razzball.com/mlbpitchingstats-last30days/'
XERA_URL = 'https://baseballsavant.mlb.com/leaderboard/expected_statistics?type=pitcher&year=2024&position=&team=&filterType=bip&min=q&sort=14&sortDir=asc'

# Constants for file paths
PROJECT_PATH = os.path.join(os.path.dirname(__file__), 'data')
DESKTOP_PATH = os.path.join(os.path.expanduser('~'), 'Desktop')
PROJECT_FILE_PATH = os.path.join(PROJECT_PATH, 'merged_pitcher_data.tsv')
DESKTOP_FILE_PATH = os.path.join(DESKTOP_PATH, 'merged_pitcher_data.tsv')

def main():
    # Scrape data
    game_df = draftkings_props_scraper(DRAFTKINGS_URL)
    fip_whip_df, _ = scrape_pitcher_stats()
    xera_df, _ = scrape_xera()

    # Merge dataframes
    game_df = merge_dataframes(game_df, fip_whip_df, xera_df)

    # Save merged data to files
    save_to_files(game_df)

def merge_dataframes(game_df, fip_whip_df, xera_df):
    """Merge the game data with FIP/WHIP and XERA data."""
    # Merge FIP/WHIP data
    game_df = game_df.merge(fip_whip_df, left_on='H-Pitcher', right_on='pitcher_name', how='left').drop(columns='pitcher_name')
    game_df = game_df.merge(fip_whip_df, left_on='A-Pitcher', right_on='pitcher_name', how='left').drop(columns='pitcher_name')

    # Rename FIP/WHIP columns
    game_df.rename(columns={'fip_x': 'H-FIP', 'whip_x': 'H-WHIP', 'fip_y': 'A-FIP', 'whip_y': 'A-WHIP'}, inplace=True)

    # Merge XERA data
    game_df = game_df.merge(xera_df, left_on='H-Pitcher', right_on='pitcher_name', how='left').drop(columns='pitcher_name')
    game_df = game_df.merge(xera_df, left_on='A-Pitcher', right_on='pitcher_name', how='left').drop(columns='pitcher_name')

    # Rename XERA columns
    game_df.rename(columns={'xera_x': 'H-XERA', 'xera_y': 'A-XERA'}, inplace=True)

    return game_df

def save_to_files(game_df):
    """Save the merged DataFrame to specified file paths."""
    os.makedirs(PROJECT_PATH, exist_ok=True)
    game_df.to_csv(PROJECT_FILE_PATH, sep='\t', index=False)
    game_df.to_csv(DESKTOP_FILE_PATH, sep='\t', index=False)

    print("Merged pitcher data saved to:")
    print(f"- Project directory: {PROJECT_FILE_PATH}")
    print(f"- Desktop: {DESKTOP_FILE_PATH}")

if __name__ == '__main__':
    main()
